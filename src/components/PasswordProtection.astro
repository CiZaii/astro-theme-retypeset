---
import { getLangFromPath } from '@/i18n/lang'
import { ui } from '@/i18n/ui'

interface Props {
  postId: string
  correctPassword: string
}

const { postId, correctPassword } = Astro.props
const lang = getLangFromPath(Astro.url.pathname)
const t = ui[lang as keyof typeof ui] || ui.en
---

<div id={`password-protection-${postId}`} class="password-protection">
  <div class="password-container">
    <div class="password-icon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6z" fill="currentColor" />
      </svg>
    </div>
    <h3 class="password-title">{t.passwordProtection.title}</h3>
    <p class="password-description">{t.passwordProtection.description}</p>

    <form class="password-form">
      <div class="password-input-group">
        <input
          type="password"
          id={`password-input-${postId}`}
          class="password-input"
          placeholder={t.passwordProtection.placeholder}
          autocomplete="current-password"
        />
        <button type="submit" class="password-submit">
          <span class="submit-text">{t.passwordProtection.unlock}</span>
          <div class="submit-loading" style="display: none;">
            <div class="loading-spinner"></div>
          </div>
        </button>
      </div>
      <div class="password-error" style="display: none;"></div>
    </form>
  </div>
</div>

<script is:inline define:vars={{ postId, correctPassword, t }}>
  const protectionElement = document.getElementById(`password-protection-${postId}`)
  const form = protectionElement.querySelector('.password-form')
  const input = protectionElement.querySelector('.password-input')
  const submitButton = protectionElement.querySelector('.password-submit')
  const submitText = protectionElement.querySelector('.submit-text')
  const submitLoading = protectionElement.querySelector('.submit-loading')
  const errorElement = protectionElement.querySelector('.password-error')

  // Basic developer tools protection (can be bypassed by experienced users)
  let contextMenuHandler = null

  function setupBasicProtection() {
    // Disable right-click context menu
    contextMenuHandler = (e) => {
      e.preventDefault()
      return false
    }
    document.addEventListener('contextmenu', contextMenuHandler)

    // Disable common keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Disable F12, Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+U
      if (e.key === 'F12'
        || (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'J'))
        || (e.ctrlKey && e.key === 'u')) {
        e.preventDefault()
        return false
      }
    })

    // Detect developer tools opening (basic detection)
    const devtools = {
      open: false,
      orientation: null,
    }

    setInterval(() => {
      if (window.outerHeight - window.innerHeight > 200
        || window.outerWidth - window.innerWidth > 200) {
        if (!devtools.open) {
          devtools.open = true
          // Redirect or show warning
          document.body.innerHTML = '<div style="display: flex; justify-content: center; align-items: center; height: 100vh; font-size: 24px; color: red;">Developer tools detected. Access denied.</div>'
        }
      }
    }, 500)

    // Disable text selection
    document.body.style.userSelect = 'none'
    document.body.style.mozUserSelect = 'none'
    document.body.style.msUserSelect = 'none'
  }

  // Check if password is already stored in sessionStorage
  const storageKey = `post-password-${postId}`
  if (sessionStorage.getItem(storageKey) === correctPassword) {
    unlockContent()
  }
  else {
    // Only apply protection if password is required
    setupBasicProtection()
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault()

    const enteredPassword = input.value.trim()

    if (!enteredPassword) {
      showError(t.passwordProtection.empty)
      return
    }

    // Show loading state
    setLoading(true)
    hideError()

    // Simulate a small delay for better UX
    await new Promise(resolve => setTimeout(resolve, 500))

    if (enteredPassword === correctPassword) {
      // Store password in sessionStorage for this session
      sessionStorage.setItem(storageKey, correctPassword)
      unlockContent()
    }
    else {
      showError(t.passwordProtection.error)
      input.value = ''
      input.focus()
    }

    setLoading(false)
  })

  function setLoading(loading) {
    if (loading) {
      submitText.style.display = 'none'
      submitLoading.style.display = 'block'
      submitButton.disabled = true
      input.disabled = true
    }
    else {
      submitText.style.display = 'block'
      submitLoading.style.display = 'none'
      submitButton.disabled = false
      input.disabled = false
    }
  }

  function showError(message) {
    errorElement.textContent = message
    errorElement.style.display = 'block'
  }

  function hideError() {
    errorElement.style.display = 'none'
  }

  function unlockContent() {
    // Remove protection when content is unlocked
    if (contextMenuHandler) {
      document.removeEventListener('contextmenu', contextMenuHandler)
    }
    document.body.style.userSelect = 'auto'
    document.body.style.mozUserSelect = 'auto'
    document.body.style.msUserSelect = 'auto'

    // Hide password protection
    protectionElement.style.display = 'none'

    // Show the actual post content
    const postContent = document.getElementById('post-content')
    if (postContent) {
      postContent.style.display = 'block'
    }

    // Show the post date
    const postDate = document.getElementById('post-date')
    if (postDate) {
      postDate.style.display = 'block'
    }

    // Add a small success animation
    protectionElement.style.opacity = '0'
    setTimeout(() => {
      postContent?.classList.add('content-unlocked')
    }, 300)
  }

  // Focus on input when component loads
  input.focus()
</script>

<style>
  .password-protection {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 400px;
    padding: 2rem;
  }

  .password-container {
    max-width: 400px;
    width: 100%;
    text-align: center;
    padding: 2.5rem 2rem;
    border: 1px solid hsl(var(--un-color-border));
    border-radius: 12px;
    background: hsl(var(--un-color-bg));
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .password-icon {
    color: hsl(var(--un-color-primary));
    margin: 0 auto 1.5rem;
    width: 24px;
    height: 24px;
  }

  .password-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: hsl(var(--un-color-text));
    margin: 0 0 0.5rem;
  }

  .password-description {
    color: hsl(var(--un-color-muted));
    margin: 0 0 2rem;
    line-height: 1.5;
  }

  .password-form {
    width: 100%;
  }

  .password-input-group {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .password-input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid hsl(var(--un-color-border));
    border-radius: 6px;
    background: hsl(var(--un-color-bg));
    color: hsl(var(--un-color-text));
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  .password-input:focus {
    outline: none;
    border-color: hsl(var(--un-color-primary));
    box-shadow: 0 0 0 3px hsl(var(--un-color-primary) / 0.1);
  }

  .password-input:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .password-submit {
    padding: 0.75rem 1.5rem;
    background: hsl(var(--un-color-primary));
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 80px;
    position: relative;
  }

  .password-submit:hover:not(:disabled) {
    background: hsl(var(--un-color-primary) / 0.9);
  }

  .password-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
    margin: 0 auto;
  }

  .password-error {
    color: hsl(var(--un-color-error, 220 38% 54%));
    font-size: 0.875rem;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: hsl(var(--un-color-error, 220 38% 54%) / 0.1);
    border-radius: 4px;
    border-left: 3px solid hsl(var(--un-color-error, 220 38% 54%));
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .password-container {
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
    }
  }

  /* Content unlock animation */
  :global(#post-content.content-unlocked) {
    animation: fadeInUp 0.6s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mobile responsiveness */
  @media (max-width: 480px) {
    .password-protection {
      padding: 1rem;
    }

    .password-container {
      padding: 2rem 1.5rem;
    }

    .password-input-group {
      flex-direction: column;
    }

    .password-submit {
      width: 100%;
    }
  }
</style>
